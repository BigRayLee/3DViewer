#ifndef TEXTUREFILE_H
#define TEXTUREFILE_H

#include <glad/glad.h>
#include <GLFW/glfw3.h>
#ifndef GL_GLEXT_PROTOTYPES
#define GL_GLEXT_PROTOTYPES
#endif
#include <GL/gl.h>
#include <GL/glext.h>

#include "stb_image.h"
#include "stb_image_write.h"
#include "Utils.h"
#include <iostream>
#include <vector>
#include <utility>
#include <string.h>
#include <fstream>

#define  FOURCC_DXT1 0x31545844
#define  FOURCC_DXT3 0x33545844
#define  FOURCC_DXT5 0x35545844

using namespace std;

#define MAX_TEXTURE_NUM  64 * 64

struct Tex{
    int id;
    int width;
    int height;
    int channel;
    int mipmap;
    u_char* data;
};

struct TextureFile
{
    /*single textrue*/
    unsigned int texture;

    /*2D texture array for terrain*/
    /*MAX TEXTURE NUMBER*/
    GLuint arrayTexture;
    
    GLuint textures[MAX_TEXTURE_NUM];

    /*textrue file list*/
    string base_path;

    uint32_t current_tex_num = 0; 

    /*based on geometry level*/
    int max_level;

    /*base texture data*/
    unsigned char *data;

    /*texture map width height and color channel*/
    int width, height, nrChannels;

    /*texture folder path*/
    string file_path;

    /*multiple texture read*/
    void Load2DTextureArray(string texture_paths);

    /*pyramid
    pair<level, texturedata>
    */
    vector<pair<int, GLubyte*>> tex_Pyramid;

    TextureFile(/* args */);
    ~TextureFile();

    /*load texture from file*/
    void load(const char * file);

    /*load texture from file for multiple textures*/
    void load(const char * file, unsigned int& texture_id);

    /*load dds texture file*/
    void loadDDS(const char * file, unsigned int& texture_id);

    /*build texture pyramid*/
    void buildTexPyramid();

    /*test the mipmap generated by opengl*/
    void testMipMap(GLuint &texture);

    /*bind different lod of texture in dynamic*/
    void bindTextureLevel(GLuint &texture, int level_cur);

    /*build texture atlas buffer*/
    void buildTextureAtlas();
};

#endif